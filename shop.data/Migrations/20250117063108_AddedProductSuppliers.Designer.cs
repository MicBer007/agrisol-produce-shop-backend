// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using shop.data;

#nullable disable

namespace shop.data.Migrations
{
    [DbContext(typeof(ShopContext))]
    [Migration("20250117063108_AddedProductSuppliers")]
    partial class AddedProductSuppliers
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ProductProductSupplier", b =>
                {
                    b.Property<Guid>("ProductsProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SuppliersProductSupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductsProductId", "SuppliersProductSupplierId");

                    b.HasIndex("SuppliersProductSupplierId");

                    b.ToTable("ProductProductSupplier");
                });

            modelBuilder.Entity("shop.domain.Customer", b =>
                {
                    b.Property<Guid>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("BankDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerId");

                    b.ToTable("customer", (string)null);

                    b.HasData(
                        new
                        {
                            CustomerId = new Guid("4c004c7a-aa08-4714-9f2a-153dce79154d"),
                            Age = 54,
                            BankDetails = "Capitec:5492875",
                            FirstName = "Harald",
                            LastName = "Berndt"
                        },
                        new
                        {
                            CustomerId = new Guid("95cdcf59-5d79-4fed-b5e5-771f9e7a2f30"),
                            Age = 32,
                            BankDetails = "Absa:475693",
                            FirstName = "Mauro",
                            LastName = "Lavista"
                        });
                });

            modelBuilder.Entity("shop.domain.Product", b =>
                {
                    b.Property<Guid>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("InStock")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PictureName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ProductId");

                    b.ToTable("product", (string)null);

                    b.HasData(
                        new
                        {
                            ProductId = new Guid("4c004c7a-aa08-4714-9f2a-153dce79154d"),
                            InStock = 15,
                            Name = "tomatoes",
                            PictureName = "tomatoes.jpg",
                            Price = 300m
                        },
                        new
                        {
                            ProductId = new Guid("571cffb5-45cf-4130-9fe8-db271cf7769e"),
                            InStock = 10,
                            Name = "potatoes",
                            PictureName = "potatoes.jpg",
                            Price = 200m
                        },
                        new
                        {
                            ProductId = new Guid("04a41261-0286-4532-9e78-9d65c77109f2"),
                            InStock = 30,
                            Name = "cabbages",
                            PictureName = "cabbages.jpg",
                            Price = 70m
                        },
                        new
                        {
                            ProductId = new Guid("6089c0d4-a700-48fb-bddd-e63e60c6c4fc"),
                            InStock = 10,
                            Name = "leeks",
                            PictureName = "leeks.jpg",
                            Price = 100m
                        },
                        new
                        {
                            ProductId = new Guid("57ac950f-8ca5-45d8-90c6-a9136752e844"),
                            InStock = 7,
                            Name = "carrots",
                            PictureName = "carrots.jpg",
                            Price = 200m
                        },
                        new
                        {
                            ProductId = new Guid("95cdcf59-5d79-4fed-b5e5-771f9e7a2f30"),
                            InStock = 5,
                            Name = "artichokes",
                            PictureName = "artichokes.jpg",
                            Price = 150m
                        },
                        new
                        {
                            ProductId = new Guid("885f5a71-8458-4c41-b437-a2b07153bf5d"),
                            InStock = 15,
                            Name = "beetroots",
                            PictureName = "beetroots.jpg",
                            Price = 30m
                        },
                        new
                        {
                            ProductId = new Guid("8bf98d1e-78a2-44a5-ba3d-7e0e40079384"),
                            InStock = 17,
                            Name = "onions",
                            PictureName = "onions.jpg",
                            Price = 250m
                        },
                        new
                        {
                            ProductId = new Guid("3e7f899d-867c-4698-b853-6c66c0f413fb"),
                            InStock = 15,
                            Name = "maize",
                            PictureName = "maize.jpg",
                            Price = 300m
                        });
                });

            modelBuilder.Entity("shop.domain.ProductSupplier", b =>
                {
                    b.Property<Guid>("ProductSupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProductSupplierName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductSupplierId");

                    b.ToTable("productSuppliers", (string)null);

                    b.HasData(
                        new
                        {
                            ProductSupplierId = new Guid("de5ae53e-886a-4061-8dfa-d5c2b27716ca"),
                            ProductSupplierName = "Juan"
                        },
                        new
                        {
                            ProductSupplierId = new Guid("32c81734-a0f9-45d2-b613-7a5304c1fb6f"),
                            ProductSupplierName = "John"
                        },
                        new
                        {
                            ProductSupplierId = new Guid("5f2601e2-2f25-4312-a61e-daa5be44a3fe"),
                            ProductSupplierName = "Johannes"
                        },
                        new
                        {
                            ProductSupplierId = new Guid("eca7177e-b329-4b1b-89cc-1f6ed6445fbe"),
                            ProductSupplierName = "Jean"
                        },
                        new
                        {
                            ProductSupplierId = new Guid("1ebd7129-aef3-4f96-8df9-4c035d214f27"),
                            ProductSupplierName = "Johan"
                        });
                });

            modelBuilder.Entity("shop.domain.Transaction", b =>
                {
                    b.Property<Guid>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TransactionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TransactionValue")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("TransactionId");

                    b.HasIndex("CustomerId");

                    b.ToTable("transaction", (string)null);

                    b.HasData(
                        new
                        {
                            TransactionId = new Guid("10987938-d34c-4809-ab86-9ba1671ad36f"),
                            CustomerId = new Guid("4c004c7a-aa08-4714-9f2a-153dce79154d"),
                            TransactionName = "Tomatoes",
                            TransactionValue = 140m
                        });
                });

            modelBuilder.Entity("ProductProductSupplier", b =>
                {
                    b.HasOne("shop.domain.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("shop.domain.ProductSupplier", null)
                        .WithMany()
                        .HasForeignKey("SuppliersProductSupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("shop.domain.Transaction", b =>
                {
                    b.HasOne("shop.domain.Customer", null)
                        .WithMany("Transactions")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("shop.domain.Customer", b =>
                {
                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
